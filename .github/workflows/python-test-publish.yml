# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package to testpypi

on:
  push:
    branches:
      - dev

permissions:
  contents: read

jobs:
  test-package:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        python -m pip install -e .[dev]
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python -m pip install -e .[dev] && python -m unittest
        
  build-package:
    runs-on: ubuntu-latest
    needs:
      - test-package
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.9 <3.14'

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - build-package
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          password: ${{ secrets.PYPITEST }}
          repository-url: https://test.pypi.org/legacy/
  
  extract-pypi-url:
    runs-on: ubuntu-latest
    needs:
      - pypi-publish
    steps:
      - name: Extract PyPI URL from publish step log
        run: |
          # Find the last line containing the PyPI URL
          grep -o 'https://test.pypi.org/project/.*' $GITHUB_WORKSPACE/log.txt | tail -1 > pypi_url.txt
        # If your workflow does not save the log, you can pipe the publish output to a file:
        # e.g. python -m twine upload ... 2>&1 | tee $GITHUB_WORKSPACE/log.txt
      
      - name: Upload PyPI URL as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pypi-url
          path: pypi_url.txt

