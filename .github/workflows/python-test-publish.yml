name: Upload Python Package to testpypi

on:
  push:
    branches:
      - dev

permissions:
  contents: read

jobs:
  test-package:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        python -m pip install -e .[dev]
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python -m pip install -e .[dev] && python -m unittest
        
  build-package:
    runs-on: ubuntu-latest
    needs:
      - test-package
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch last two commits to ensure we have access to commit info

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.9 <3.14'

      - name: Get version components
        id: get-components
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          PVERSION=$(grep -Po "(?<=version = \")(.*)(?=\")" pyproject.toml)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "PVERSION=$PVERSION" >> $GITHUB_ENV
      
      - name: Create new version and modify files
        id: version
        run: |
          NVZERSION="${PVERSION}+dev.${SHORT_SHA}"
          echo "NVZERSION=$NVZERSION" >> $GITHUB_ENV
          echo "using version :: $NVZERSION"
          echo "version=$NVZERSION" >> $GITHUB_OUTPUT
          echo "Using the following version for the test build: $NVZERSION" >> $GITHUB_STEP_SUMMARY
          
          # modify version in pyproject.toml
          sed -i "s/version = \"\([^\"]*\)\"/version = \"$NVZERSION\"/" pyproject.toml

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build
          
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - build-package
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          password: ${{ secrets.PYPITEST }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true
  
  extract-pypi-url:
    runs-on: ubuntu-latest
    needs:
      - pypi-publish
      - build-package
    steps:
      - name: Make job summary
        run: |
          echo "The new version of the package can be found at: https://test.pypi.org/project/simpn/${{ needs.build-package.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
